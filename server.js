/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/
 
const bGround = require('fcc-express-bground');
const myApp = require('./myApp');
const express = require('express');
const app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use((req, res, next) => {
    const allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    const origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}
// app.get('/', (req, res) => {
//     res.send('Hello Express');
// });

// app.use((req, res, next) => {
//   const logMessage = `${req.method} ${req.path} - ${req.ip}`;
//   console.log(logMessage);
//   next();
// });

app.get('/now', (req, res, next) => {
  req.time = new Date().toString();
  next();
}, (req, res) => {
  res.json({ time: req.time });
});

app.use('/public',express.static(__dirname+'/public'));
  
app.get('/', (req, res) => {
  res.sendFile(__dirname+'/views/index.html');
});


app.get('/json', (req, res) => {
  const message = 'Hello json';
  if (process.env.MESSAGE_STYLE === 'uppercase') {
      return res.json({ message: message.toUpperCase() });
  }
  return res.json({ message: message });
});

const port = process.env.PORT || 3000;
bGround.setupBackgroundApp(app, myApp, __dirname).listen(port, () => {
  bGround.log(`Node is listening on port ${port}...`);
});

/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

